- name: vertx-k8-workshop-apb playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user:
    openshift_password:
    openshift_token:
    openshift_master_url:
    openshift_user_password:
    project_suffix: "-XX"
    github_account: tqvarnst
    github_ref: master
    # gogs_dev_user: developer
    # gogs_pwd: openshift
    # gogs_generate_user_format: user%02d
    # gogs_clone_addr: "https://github.com/jbossdemocentral/vertx-kubernetes-workshop.git"
    # gogs_repo_name: "vertx-kubernetes-workshop"
    # gogs_user_count: 10
    che_generate_user_count: 10
    # gogs_user_format: user%d
    infrasvcs_adm_user: adminuser
    infrasvcs_adm_pwd: adminpwd
    # infrasvcs_gogs_user_count: 25
    master_url: "kubernetes.default"


  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules

  tasks:
  - name: login as super user with token
    shell: "oc login {{ master_url }} --token={{ openshift_token }} --insecure-skip-tls-verify=true"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - name: login as super user with pwd
    shell: "oc login {{ master_url }} -u {{ openshift_user }} -p {{ openshift_password }} --insecure-skip-tls-verify=true"
    when: >
      openshift_token is not defined or
      openshift_token is none or
      openshift_token|trim() == ""
    tags: always

  - name: extract app route suffix
    block:
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: present
          spec_to_kind: Service
          spec_to_name: dummy
          spec_port_target_port: 8080
        register: dummy_route
      - set_fact:
          apps_hostname_suffix: "{{ dummy_route.route.spec.host|regex_replace('^dummy-' + namespace + '\\.(.*)$', '\\1') }}"
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: absent
    tags: always

  - name: delete project quota
    shell: "oc delete limitrange --all -n {{ namespace }}"
    ignore_errors: true
    tags: always



#  # deploy gogs
#   - import_role:
#       name: openshift_gogs
#     vars:
#       project_name: "{{ namespace }}"
#       gogs_route: "gogs-{{ namespace }}.{{ apps_hostname_suffix }}"
#       gogs_image_version: 0.11.34
#       gogs_admin_user: "{{ infrasvcs_adm_user }}"
#       gogs_admin_password: "{{ infrasvcs_adm_pwd }}"
#       gogs_user: "{{ gogs_dev_user }}"
#       gogs_password: "{{ gogs_pwd }}"
#     tags: gogs

#   - name: Create gogs users
#     uri:
#       url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/admin/users
#       method: POST
#       body: "{'login_name': '{{ item }}', 'username': '{{ item }}', 'email': '{{ item }}@gogs.com', 'password': '{{ gogs_pwd }}'}"
#       body_format: json
#       user: "{{ infrasvcs_adm_user }}"
#       password: "{{ infrasvcs_adm_pwd }}"
#       status_code: 200,201
#       force_basic_auth: true
#     ignore_errors: true
#     with_sequence: start=0 end={{ infrasvcs_gogs_user_count }} format="{{ gogs_user_format }}"
#     when: infrasvcs_gogs_user_count > 0

#   - name: migrate repos for all users
#     uri:
#       url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
#       method: POST
#       body: "{'clone_addr': '{{ gogs_clone_addr }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name }}' }"
#       body_format: json
#       username: "user{{ item }}"
#       url_username: "user{{ item }}"
#       password: "{{ gogs_pwd }}"
#       status_code: 200,201
#       force_basic_auth: true
#     ignore_errors: true
#     with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
#     when: infrasvcs_gogs_user_count > 0

  # deploy guides
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2-guides/{{ github_ref }}/_cloud-native-workshop.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
    tags: guides

  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-che
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-guides/{{ github_ref }}/_cloud-native-workshop-che.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
    tags: guides

  # TODO https://github.com/tqvarnst/quarkus-workshop/issues/1
  # # install openjdk imagestream
  # - name: get openjdk image stream
  #   shell: "oc get is java -n openshift"
  #   register: java_imagestream_result
  #   ignore_errors: true
  #   tags: jdk

  # - name: install java image stream
  #   shell: "oc apply -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/openjdk/openjdk18-image-stream.json"
  #   when: java_imagestream_result is failed
  #   tags: jdk

  # deploy eclipse che
  - import_role:
      name: openshift_eclipse_che
    vars:
      project_name: "{{ namespace }}"
      che_version: "6.8.0"
      multi_user: true
      route_suffix: "{{ apps_hostname_suffix }}"
      keycloak_admin_user: "{{ infrasvcs_adm_user }}"
      keycloak_admin_pwd: "{{ infrasvcs_adm_pwd }}"
      install_java_oc_stack: false
      install_custom_stacks_json: |
        [{
          "name": "Quarkus Development",
          "description": "Java JDK Stack on CentOS for Vertx-Workshop",
          "scope": "general",
          "workspaceConfig": {
            "environments": {
              "default": {
                "recipe": {
                  "type": "dockerimage",
                  "content": "siamaksade/che-centos-jdk8"
                },
                "machines": {
                  "dev-machine": {
                    "env": {
                      "MAVEN_OPTS" : "-Xmx512m"
                    },
                    "servers": {
                      "8080/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8080"
                      },
                      "8000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8000"
                      },
                      "9000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9000"
                      },
                      "9001/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9001"
                      }
                    },
                    "volumes": {},
                    "installers": [
                      "org.eclipse.che.exec",
                      "org.eclipse.che.terminal",
                      "org.eclipse.che.ws-agent"
                    ],
                    "attributes": {
                      "memoryLimitBytes": "2147483648"
                    }
                  }
                }
              }
            },
            "commands": [
              {
                "commandLine": "mvn compile quarkus:dev -f ${current.project.path}",
                "name": "Run in dev mode",
                "type": "mvn",
                "attributes": {
                  "goal": "Run",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn clean package -f ${current.project.path}",
                "name": "clean build",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn verify -f ${current.project.path}",
                "name": "test",
                "type": "mvn",
                "attributes": {
                  "goal": "Test",
                  "previewUrl": ""
                }
              }
            ],
            "projects": [],
            "defaultEnv": "default",
            "name": "default",
            "links": []
          },
          "components": [
            {
              "version": "---",
              "name": "CentOS"
            },
            {
              "version": "1.8.0_45",
              "name": "JDK"
            },
            {
              "version": "3.2.2",
              "name": "Maven"
            },
            {
              "version": "3.11",
              "name": "OpenShift CLI"
            }
          ],
          "creator": "ide",
          "tags": [
            "Java",
            "Quarkus",
            "JDK",
            "Maven",
            "CentOS",
            "Git"
          ],
          "id": "java-oc-centos-quarkus"
        }]
    tags: eclipse-che
